'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsyncIterable = exports.sleep = exports.parseOaiPmhXml = exports.OaiPmhError = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bluebird = require('bluebird');

var _co = require('co');

var _co2 = _interopRequireDefault(_co);

var _lodash = require('lodash');

var _xml2js = require('xml2js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// error class for OAI-PMH errors
let OaiPmhError = exports.OaiPmhError = function (_Error) {
  _inherits(OaiPmhError, _Error);

  function OaiPmhError(message, code) {
    _classCallCheck(this, OaiPmhError);

    var _this = _possibleConstructorReturn(this, (OaiPmhError.__proto__ || Object.getPrototypeOf(OaiPmhError)).call(this, message));

    _this.name = _this.constructor.name;
    _this.message = message;
    _this.code = code;
    Error.captureStackTrace(_this, _this.constructor.name);
    return _this;
  }

  return OaiPmhError;
}(Error);

// test if the parsed xml contains an error


const parseOaiPmhXml = exports.parseOaiPmhXml = _co2.default.wrap(function* _parseOaiPmhXml(xml) {
  // parse xml into js object
  const obj = yield (0, _bluebird.promisify)(_xml2js.parseString)(xml, {
    explicitArray: false,
    trim: true,
    normalize: true
  });

  const oaiPmh = obj && obj['OAI-PMH'];

  if (!oaiPmh) {
    throw new OaiPmhError('Returned data does not conform to OAI-PMH');
  }

  const error = oaiPmh.error;
  if (error) {
    throw new OaiPmhError(`OAI-PMH provider returned an error: ${error._}`, (0, _lodash.get)(error, '$.code'));
  }

  return oaiPmh;
});

// sleep via promise
const sleep = exports.sleep = _co2.default.wrap(function* _sleep(seconds) {
  return new Promise(resolve => setTimeout(resolve, seconds * 1000));
});

let AsyncIterable = exports.AsyncIterable = function () {
  function AsyncIterable() {
    _classCallCheck(this, AsyncIterable);

    if (this.getNext === undefined) {
      throw new Error('Derived class must implement a getNext method that returns a promise');
    }
    this._done = false;
  }

  _createClass(AsyncIterable, [{
    key: 'done',
    value: function done() {
      this._done = true;
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return {
        next: () => {
          // has the last element been returned?
          if (this._done) {
            return { done: true };
          }

          // make sure that no promise is currently running
          if (this.running) {
            throw new Error('There is still a promise running. Did you forget to yield it?');
          }

          // make sure that the last promise wasn't rejected
          if (this.failed) {
            throw new Error('The last promise failed. Check your error handling.');
          }

          // set state to running
          this.running = true;

          // get next promise
          const next = this.getNext();

          // hook to next promise
          next.then(
          // resolved
          () => {
            this.running = false;
          },
          // rejected
          e => {
            this.failed = true;throw e;
          });

          return { value: next };
        }
      };
    }
  }]);

  return AsyncIterable;
}();